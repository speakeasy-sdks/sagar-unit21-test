// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CreateInstrumentRequestSource - LEGACY. If your platform owns and administers this instrument, the instrument is `internal`, otherwise it is `external`.
type CreateInstrumentRequestSource string

const (
	CreateInstrumentRequestSourceInternal CreateInstrumentRequestSource = "internal"
	CreateInstrumentRequestSourceExternal CreateInstrumentRequestSource = "external"
)

func (e CreateInstrumentRequestSource) ToPointer() *CreateInstrumentRequestSource {
	return &e
}

func (e *CreateInstrumentRequestSource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal":
		fallthrough
	case "external":
		*e = CreateInstrumentRequestSource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateInstrumentRequestSource: %v", v)
	}
}

type CreateInstrumentRequest struct {
	// Any custom information that you wish our system to associate with this object  (accepts any valid JSON object -- up to 3 layers deep -- in key:value format --  `string:string`, `string:int`, `string:bool` -- no arrays)
	CustomData map[string]interface{} `json:"custom_data,omitempty"`
	// Associated digital properties - IP, device, browser, client info etc.
	DigitalData *DigitalDataArrayProperties `json:"digital_data,omitempty"`
	// List of the unique identifiers of the entity IDs.
	Entities []RelatedEntity `json:"entities,omitempty"`
	// Unique identifier of the instrument. Intrument IDs must be unique and only comprise of the characters -_:.@a-zA-Z0-9!#$%&*+/=?^`{'
	InstrumentID string `json:"instrument_id"`
	// A more detailed type of instrument. Common examples include `visa`, `mastercard` or `american-express` if type is `cc`
	InstrumentSubtype *string `json:"instrument_subtype,omitempty"`
	// Type of instrument. Common examples include `bank`, `cash`, and `credit card`
	InstrumentType *string `json:"instrument_type,omitempty"`
	// Array of location data objects.
	LocationData []LocationDataProperties `json:"location_data,omitempty"`
	Options      *Options                 `json:"options,omitempty"`
	// Unique identifier of the parent instrument.
	ParentInstrumentID *string `json:"parent_instrument_id,omitempty"`
	// Date in seconds since 1 Jan 1970 00:00:00 UTC (i.e. in [Unix time](https://en.wikipedia.org/wiki/Unix_time)).
	RegisteredAt *int64 `json:"registered_at,omitempty"`
	// LEGACY. If your platform owns and administers this instrument, the instrument is `internal`, otherwise it is `external`.
	Source *CreateInstrumentRequestSource `json:"source,omitempty"`
	// Status of the object on your system. You MAY enter any string value.
	Status *string `json:"status,omitempty"`
	// List of string tags, in the format `keyString:valueString` (note that the Key strings are NOT enclosed in `"`)
	Tags []string `json:"tags,omitempty"`
}
