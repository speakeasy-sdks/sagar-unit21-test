// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// ExportSarsRequestBodyFiltersReportType - Type of report.
type ExportSarsRequestBodyFiltersReportType string

const (
	ExportSarsRequestBodyFiltersReportTypeFincenSar   ExportSarsRequestBodyFiltersReportType = "FINCEN_SAR"
	ExportSarsRequestBodyFiltersReportTypeEstonianFiu ExportSarsRequestBodyFiltersReportType = "ESTONIAN_FIU"
	ExportSarsRequestBodyFiltersReportTypeGoamlStr    ExportSarsRequestBodyFiltersReportType = "GOAML_STR"
	ExportSarsRequestBodyFiltersReportTypeNcaSar      ExportSarsRequestBodyFiltersReportType = "NCA_SAR"
)

func (e ExportSarsRequestBodyFiltersReportType) ToPointer() *ExportSarsRequestBodyFiltersReportType {
	return &e
}

func (e *ExportSarsRequestBodyFiltersReportType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FINCEN_SAR":
		fallthrough
	case "ESTONIAN_FIU":
		fallthrough
	case "GOAML_STR":
		fallthrough
	case "NCA_SAR":
		*e = ExportSarsRequestBodyFiltersReportType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ExportSarsRequestBodyFiltersReportType: %v", v)
	}
}

type ExportSarsRequestBodyFiltersStatuses string

const (
	ExportSarsRequestBodyFiltersStatusesArchived                     ExportSarsRequestBodyFiltersStatuses = "ARCHIVED"
	ExportSarsRequestBodyFiltersStatusesPrefilingValidationPending   ExportSarsRequestBodyFiltersStatuses = "PREFILING_VALIDATION_PENDING"
	ExportSarsRequestBodyFiltersStatusesPrefilingValidationInProcess ExportSarsRequestBodyFiltersStatuses = "PREFILING_VALIDATION_IN_PROCESS"
	ExportSarsRequestBodyFiltersStatusesPrefilingValidationFailed    ExportSarsRequestBodyFiltersStatuses = "PREFILING_VALIDATION_FAILED"
	ExportSarsRequestBodyFiltersStatusesPrefilingValidationSuccess   ExportSarsRequestBodyFiltersStatuses = "PREFILING_VALIDATION_SUCCESS"
	ExportSarsRequestBodyFiltersStatusesQueuedForFiling              ExportSarsRequestBodyFiltersStatuses = "QUEUED_FOR_FILING"
	ExportSarsRequestBodyFiltersStatusesReadyForReview               ExportSarsRequestBodyFiltersStatuses = "READY_FOR_REVIEW"
	ExportSarsRequestBodyFiltersStatusesSendingToFincen              ExportSarsRequestBodyFiltersStatuses = "SENDING_TO_FINCEN"
	ExportSarsRequestBodyFiltersStatusesSentToFincen                 ExportSarsRequestBodyFiltersStatuses = "SENT_TO_FINCEN"
	ExportSarsRequestBodyFiltersStatusesFilingFailed                 ExportSarsRequestBodyFiltersStatuses = "FILING_FAILED"
	ExportSarsRequestBodyFiltersStatusesFilingMaxRetriesExceeded     ExportSarsRequestBodyFiltersStatuses = "FILING_MAX_RETRIES_EXCEEDED"
	ExportSarsRequestBodyFiltersStatusesFilingSuccess                ExportSarsRequestBodyFiltersStatuses = "FILING_SUCCESS"
	ExportSarsRequestBodyFiltersStatusesFincenValidationFailed       ExportSarsRequestBodyFiltersStatuses = "FINCEN_VALIDATION_FAILED"
	ExportSarsRequestBodyFiltersStatusesFincenRejected               ExportSarsRequestBodyFiltersStatuses = "FINCEN_REJECTED"
	ExportSarsRequestBodyFiltersStatusesFincenStatusOther            ExportSarsRequestBodyFiltersStatuses = "FINCEN_STATUS_OTHER"
	ExportSarsRequestBodyFiltersStatusesFincenAccepted               ExportSarsRequestBodyFiltersStatuses = "FINCEN_ACCEPTED"
)

func (e ExportSarsRequestBodyFiltersStatuses) ToPointer() *ExportSarsRequestBodyFiltersStatuses {
	return &e
}

func (e *ExportSarsRequestBodyFiltersStatuses) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ARCHIVED":
		fallthrough
	case "PREFILING_VALIDATION_PENDING":
		fallthrough
	case "PREFILING_VALIDATION_IN_PROCESS":
		fallthrough
	case "PREFILING_VALIDATION_FAILED":
		fallthrough
	case "PREFILING_VALIDATION_SUCCESS":
		fallthrough
	case "QUEUED_FOR_FILING":
		fallthrough
	case "READY_FOR_REVIEW":
		fallthrough
	case "SENDING_TO_FINCEN":
		fallthrough
	case "SENT_TO_FINCEN":
		fallthrough
	case "FILING_FAILED":
		fallthrough
	case "FILING_MAX_RETRIES_EXCEEDED":
		fallthrough
	case "FILING_SUCCESS":
		fallthrough
	case "FINCEN_VALIDATION_FAILED":
		fallthrough
	case "FINCEN_REJECTED":
		fallthrough
	case "FINCEN_STATUS_OTHER":
		fallthrough
	case "FINCEN_ACCEPTED":
		*e = ExportSarsRequestBodyFiltersStatuses(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ExportSarsRequestBodyFiltersStatuses: %v", v)
	}
}

// ExportSarsRequestBodyFilters - Filter to narrow down sars in export
type ExportSarsRequestBodyFilters struct {
	// Report Creation end date.
	CreatedAtEnd *string `json:"created_at_end,omitempty"`
	// Report creation start date.
	CreatedAtStart *string `json:"created_at_start,omitempty"`
	// Report file end date.
	FiledAtEnd *string `json:"filed_at_end,omitempty"`
	// Report file start date.
	FiledAtStart *string `json:"filed_at_start,omitempty"`
	// Type of report.
	ReportType *ExportSarsRequestBodyFiltersReportType `json:"report_type,omitempty"`
	// Status of the sar.
	Status *string `json:"status,omitempty"`
	// Status for the sars.
	Statuses []ExportSarsRequestBodyFiltersStatuses `json:"statuses,omitempty"`
	// Report submited?
	Submitted *bool `json:"submitted,omitempty"`
	// Numerical IDs of the tags.
	TagIds []int64 `json:"tag_ids,omitempty"`
	// Report update end date.
	UpdatedAtEnd *string `json:"updated_at_end,omitempty"`
	// Report update start date.
	UpdatedAtStart *string `json:"updated_at_start,omitempty"`
}

type ExportSarsRequestBody struct {
	// Filter to narrow down sars in export
	Filters *ExportSarsRequestBodyFilters `json:"filters,omitempty"`
	// Array of the unique identifiers of the sar IDs.
	SarIds []int64 `json:"sar_ids,omitempty"`
}

type ExportSarsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
