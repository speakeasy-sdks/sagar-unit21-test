// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"unit21/pkg/models/shared"
)

type ExportInstrumentsRequestBodyFiltersStatuses string

const (
	ExportInstrumentsRequestBodyFiltersStatusesActive   ExportInstrumentsRequestBodyFiltersStatuses = "active"
	ExportInstrumentsRequestBodyFiltersStatusesInactive ExportInstrumentsRequestBodyFiltersStatuses = "inactive"
)

func (e ExportInstrumentsRequestBodyFiltersStatuses) ToPointer() *ExportInstrumentsRequestBodyFiltersStatuses {
	return &e
}

func (e *ExportInstrumentsRequestBodyFiltersStatuses) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "active":
		fallthrough
	case "inactive":
		*e = ExportInstrumentsRequestBodyFiltersStatuses(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ExportInstrumentsRequestBodyFiltersStatuses: %v", v)
	}
}

// ExportInstrumentsRequestBodyFilters - Filter to narrow down instruments in export
type ExportInstrumentsRequestBodyFilters struct {
	// Instrument creation date end.
	EndDate *string `json:"end_date,omitempty"`
	// Numerical IDs of the entities.
	EntityIds []int64 `json:"entity_ids,omitempty"`
	// Type of instrument.
	InstrumentType *string `json:"instrument_type,omitempty"`
	// Numerical IDs of the rules.
	RuleIds []int64 `json:"rule_ids,omitempty"`
	// Instrument creation date start.
	StartDate *string `json:"start_date,omitempty"`
	// Status of the instruments.
	Status *string `json:"status,omitempty"`
	// Statuses for the instruments.
	Statuses []ExportInstrumentsRequestBodyFiltersStatuses `json:"statuses,omitempty"`
	// Numerical IDs of the tags.
	TagIds []int64 `json:"tag_ids,omitempty"`
}

type ExportInstrumentsRequestBody struct {
	// Filter to narrow down instruments in export
	Filters *ExportInstrumentsRequestBodyFilters `json:"filters,omitempty"`
	// List of instrument_ids.
	InstrumentIds []string `json:"instrument_ids,omitempty"`
}

// ExportInstrumentsMessageGeneralResponse - OK
type ExportInstrumentsMessageGeneralResponse struct {
	// Error message
	ErrorCode *string `json:"error_code,omitempty"`
	// Detailed message
	Message *string `json:"message,omitempty"`
}

type ExportInstrumentsResponse struct {
	ContentType string
	// OK
	MessageGeneralResponse *ExportInstrumentsMessageGeneralResponse
	StatusCode             int
	RawResponse            *http.Response
	// OK
	BulkExportResponse *shared.BulkExportResponse
}
