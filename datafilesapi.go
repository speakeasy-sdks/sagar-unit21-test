// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package sdk

import (
	"context"
	"fmt"
	"net/http"
	"strings"
	"unit21/pkg/models/operations"
	"unit21/pkg/utils"
)

// datafilesAPI - If you want to bulk upload multiple objects, you can send them via a POST to the `/datafiles` endpoint. For the fastest processing, the datafile SHOULD be a JSON file in the format of a typical POST request to this API.
type datafilesAPI struct {
	defaultClient  HTTPClient
	securityClient HTTPClient
	serverURL      string
	language       string
	sdkVersion     string
	genVersion     string
}

func newDatafilesAPI(defaultClient, securityClient HTTPClient, serverURL, language, sdkVersion, genVersion string) *datafilesAPI {
	return &datafilesAPI{
		defaultClient:  defaultClient,
		securityClient: securityClient,
		serverURL:      serverURL,
		language:       language,
		sdkVersion:     sdkVersion,
		genVersion:     genVersion,
	}
}

// CreateDatafiles - Upload datafiles
// Bulk upload multiple objects of the same type. Can be entities, events, or instruments.
//
// Only one file can be uploaded in a request, with a file size maximum of 1GB. Please add a waiting time of two seconds between requests.
//
// Use `--form datafile` to specify the datafile, and `run_rules` to configure whether to run Unit21 rules on the datafile after it's processed.
//
// We support JSON format only.
//

func (s *datafilesAPI) CreateDatafiles(ctx context.Context, request operations.CreateDatafilesRequestBody) (*operations.CreateDatafilesResponse, error) {
	baseURL := s.serverURL
	url := strings.TrimSuffix(baseURL, "/") + "/datafiles/create"

	bodyReader, reqContentType, err := utils.SerializeRequestBody(ctx, request, "Request", "multipart")
	if err != nil {
		return nil, fmt.Errorf("error serializing request body: %w", err)
	}
	if bodyReader == nil {
		return nil, fmt.Errorf("request body is required")
	}

	req, err := http.NewRequestWithContext(ctx, "POST", url, bodyReader)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	req.Header.Set("Content-Type", reqContentType)

	client := s.securityClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.CreateDatafilesResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
	}

	return res, nil
}

// GetDatafileByUnit21ID - Get datafile
// Get details about a datafile.
//
// This endpoint requires the `unit21_id` which is a unique ID created by Unit21 when the datafile is first created.

func (s *datafilesAPI) GetDatafileByUnit21ID(ctx context.Context, request operations.GetDatafileByUnit21IDRequest) (*operations.GetDatafileByUnit21IDResponse, error) {
	baseURL := s.serverURL
	url, err := utils.GenerateURL(ctx, baseURL, "/datafiles/{unit21_id}", request, nil)
	if err != nil {
		return nil, fmt.Errorf("error generating URL: %w", err)
	}

	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	client := s.securityClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.GetDatafileByUnit21IDResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
	}

	return res, nil
}

// GetDatafileMappings - Retrieve datafile mappings
// Retrieve datafile mapping of objects uploaded with a datafile.
//
// Includes 3 arrays: entities, events, instruments. Each list is limited to a maximum of 500 items.
//
// The total number of items can be retrieved from the GET endpoint.
//
// Please note that an empty response `{}` will be returned if the datafile is not yet processed.
//

func (s *datafilesAPI) GetDatafileMappings(ctx context.Context, request operations.GetDatafileMappingsRequest) (*operations.GetDatafileMappingsResponse, error) {
	baseURL := s.serverURL
	url, err := utils.GenerateURL(ctx, baseURL, "/datafiles/{unit21_id}/mappings", request, nil)
	if err != nil {
		return nil, fmt.Errorf("error generating URL: %w", err)
	}

	bodyReader, reqContentType, err := utils.SerializeRequestBody(ctx, request, "RequestBody", "json")
	if err != nil {
		return nil, fmt.Errorf("error serializing request body: %w", err)
	}

	req, err := http.NewRequestWithContext(ctx, "POST", url, bodyReader)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	req.Header.Set("Content-Type", reqContentType)

	client := s.securityClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.GetDatafileMappingsResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
	}

	return res, nil
}
