// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"net/http"
	"unit21/pkg/models/shared"
)

type LinkMediaToEntityRequestBodyType string

const (
	LinkMediaToEntityRequestBodyTypeArrayOflinkMediaJSON LinkMediaToEntityRequestBodyType = "arrayOflinkMediaJSON"
	LinkMediaToEntityRequestBodyTypeLinkMediaForm        LinkMediaToEntityRequestBodyType = "linkMediaForm"
)

type LinkMediaToEntityRequestBody struct {
	ArrayOflinkMediaJSON []shared.LinkMediaJSON
	LinkMediaForm        *shared.LinkMediaForm

	Type LinkMediaToEntityRequestBodyType
}

func CreateLinkMediaToEntityRequestBodyArrayOflinkMediaJSON(arrayOflinkMediaJSON []shared.LinkMediaJSON) LinkMediaToEntityRequestBody {
	typ := LinkMediaToEntityRequestBodyTypeArrayOflinkMediaJSON

	return LinkMediaToEntityRequestBody{
		ArrayOflinkMediaJSON: arrayOflinkMediaJSON,
		Type:                 typ,
	}
}

func CreateLinkMediaToEntityRequestBodyLinkMediaForm(linkMediaForm shared.LinkMediaForm) LinkMediaToEntityRequestBody {
	typ := LinkMediaToEntityRequestBodyTypeLinkMediaForm

	return LinkMediaToEntityRequestBody{
		LinkMediaForm: &linkMediaForm,
		Type:          typ,
	}
}

func (u *LinkMediaToEntityRequestBody) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	arrayOflinkMediaJSON := []shared.LinkMediaJSON{}
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&arrayOflinkMediaJSON); err == nil {
		u.ArrayOflinkMediaJSON = arrayOflinkMediaJSON
		u.Type = LinkMediaToEntityRequestBodyTypeArrayOflinkMediaJSON
		return nil
	}

	linkMediaForm := new(shared.LinkMediaForm)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&linkMediaForm); err == nil {
		u.LinkMediaForm = linkMediaForm
		u.Type = LinkMediaToEntityRequestBodyTypeLinkMediaForm
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u LinkMediaToEntityRequestBody) MarshalJSON() ([]byte, error) {
	if u.ArrayOflinkMediaJSON != nil {
		return json.Marshal(u.ArrayOflinkMediaJSON)
	}

	if u.LinkMediaForm != nil {
		return json.Marshal(u.LinkMediaForm)
	}

	return nil, nil
}

type LinkMediaToEntityRequest struct {
	RequestBody *LinkMediaToEntityRequestBody `request:"mediaType=application/json"`
	EntityID    string                        `pathParam:"style=simple,explode=false,name=entity_id"`
	// Name of organization in your environment
	OrgName string `pathParam:"style=simple,explode=false,name=org_name"`
}

type LinkMediaToEntityResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// NOT FOUND
	ErrorResponse *shared.ErrorResponse
}
